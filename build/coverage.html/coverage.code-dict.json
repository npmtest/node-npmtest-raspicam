{"/home/travis/build/npmtest/node-npmtest-raspicam/test.js":"/* istanbul instrument in package npmtest_raspicam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-raspicam/lib.npmtest_raspicam.js":"/* istanbul instrument in package npmtest_raspicam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_raspicam = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_raspicam = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-raspicam/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-raspicam && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_raspicam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_raspicam\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_raspicam.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_raspicam.rollup.js'] =\n            local.assetsDict['/assets.npmtest_raspicam.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_raspicam.__dirname + '/lib.npmtest_raspicam.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-raspicam/node_modules/raspicam/lib/raspicam.js":"var events = require('events'),\n    spawn = require(\"child_process\").spawn,\n    util = require(\"util\"),\n    fs = require(\"fs\"),\n    _ = require(\"lodash\"),\n    __ = require(\"../lib/fn.js\"),\n    parameters = require(\"../options\").parameters,\n    flags = require(\"../options\").flags;\n\n\n// maximum timeout allowed by raspicam command\nvar INFINITY_MS = 999999999;\n\n// flat to tell if a process is running\nvar PROCESS_RUNNING_FLAG = false;\n\n// commands\nvar PHOTO_CMD = '/opt/vc/bin/raspistill';\nvar TIMELAPSE_CMD = '/opt/vc/bin/raspistill';\nvar VIDEO_CMD = '/opt/vc/bin/raspivid';\n\n// the process id of the process spawned to take photos/video\nvar child_process = null;\n\n\n// Exit strategy to kill child process\n// (eg. for timelapse) on parent process exit\nprocess.on('exit', function() {\n  if(PROCESS_RUNNING_FLAG){\n    child_process.kill();\n  }\n});\n\n\n/**\n * RaspiCam\n * @constructor\n *\n * @description Raspberry Pi camera controller object\n *\n * @param {Object} opts Options: mode, freq, delay, width, height, quality, encoding, filepath, filename, timeout\n */\nfunction RaspiCam( opts ) {\n  \n  if ( !(this instanceof RaspiCam) ) {\n    return new RaspiCam( opts );\n  }\n\n  // Ensure opts is an object\n  opts = opts || {};\n\n  if(typeof opts.mode === \"undefined\" || typeof opts.output === \"undefined\"){\n    console.log(\"Error: RaspiCam: must define mode and output\");\n    return false;\n  }\n\n  // Initialize this Board instance with\n  // param specified properties.\n  this.opts = {};\n  _.assign( this.opts, opts );\n\n  // If any opts use the abbreviation, convert to\n  // the full word (eg. from opts.w to opts.width)\n  this.hashOpts( opts );\n\n  // Set up opts defaults\n  this.defaultOpts( );\n\n  // Create derivative opts\n  this.derivativeOpts( );\n\n  // If this.filepath doesn't exist, make it\n  this.createFilepath( );\n  \n  //child process\n  this.child_process = null;\n\n  //directory watcher\n  this.watcher = null;\n\n  //events.EventEmitter.call(this);\n}\n\n// Inherit event api\nutil.inherits( RaspiCam, events.EventEmitter );\n\n/**\n*\n* hashOpts()\n*\n* Converts any abbreviated opts to their full word equivalent \n* and assigns to this.\n* \n**/\nRaspiCam.prototype.hashOpts = function(opts){\n  for(var opt in opts){\n    if(opt.length <= 3){\n\n      // if this opt is in the parameters hash\n      if(typeof parameters[opt] !== \"undefined\"){\n\n        // reassign it to the full word\n        this.opts[parameters[opt]] = opts[opt];\n        delete this.opts[opt];\n      }\n\n      // if this opt is in the flags hash\n      if(typeof flags[opt] !== \"undefined\"){\n\n        // reassign it to the full word\n        this.opts[flags[opt]] = opts[opt];\n        delete this.opts[opt];\n      }\n    }\n  }\n};\n\n\n/**\n*\n* defaultOpts()\n*\n* Parses the opts to set defaults.\n*\n**/\nRaspiCam.prototype.defaultOpts = function(){\n\n  this.opts.mode = this.opts.mode || 'photo';//photo, timelapse or video\n\n  this.opts.width = this.opts.width || 640;\n  this.opts.height = this.opts.height || 480;\n\n  // Limit timeout to the maximum value\n  // supported by the Raspberry Pi camera,\n  // determined by testing.\n  if(typeof this.opts.timeout !== \"undefined\"){\n    this.opts.timeout = Math.min( this.opts.timeout, INFINITY_MS );\n  }\n\n};\n\n\n/**\n*\n* derivativeOpts()\n*\n* Create any derivative opts, such as filepath and filename\n* \n**/\nRaspiCam.prototype.derivativeOpts = function(){\n\n  this.filename = this.opts.output.substr( this.opts.output.lastIndexOf(\"/\") + 1 );\n\n  this.filepath = this.opts.output.substr(0, this.opts.output.lastIndexOf(\"/\") + 1 ) || \"./\";\n};\n\n\n/**\n*\n* createFilepath()\n*\n* Create the filepath if it doesn't already exist.\n* \n**/\nRaspiCam.prototype.createFilepath = function(){\n  if( !fs.existsSync( this.filepath )){\n    fs.mkdirSync( this.filepath );\n\n    // set write permissions\n    fs.chmodSync( this.filepath, 0755 );\n  }\n};\n\n\n\nRaspiCam.prototype.watchDirectory = function( ) {\n  //alias to pass to callbacks\n  var self = this;\n\n  //close previous directory watcher if any\n  if(this.watcher !== null){\n    this.watcher.close();\n  }\n\n  //start watching the directory where the images will be stored to emit signals on each new photo saved\n  this.watcher = fs.watch(this.filepath, function(event, filename){\n    //rename is called once, change is called 3 times, so check for rename to elimate duplicates\n    if(event === \"rename\"){\n      console.log('raspicam::watcher::event ' + event);\n      self.emit( \"read\", null, new Date().getTime(), filename );\n    }else{\n      console.log('raspicam::watcher::event ' + event);\n      self.emit( event, null, new Date().getTime(), filename );\n    }\n  });\n};\n\n/**\n * start Take a snapshot or start a timelapse or video recording\n * @param  {Number} mode Sensor pin mode value\n * @return {Object} instance\n */\nRaspiCam.prototype.start = function( ) {\n\n  if(PROCESS_RUNNING_FLAG){\n    return false;\n  }\n\n  this.watchDirectory();\n\n  // build the arguments\n  var args = [];\n\n  for(var opt in this.opts){\n    if(opt !== \"mode\"){\n      args.push(\"--\" + opt);\n      //don't add value for true flags\n      if( this.opts[opt].toString() != \"true\" && this.opts[opt].toString() != \"false\"){\n        args.push(this.opts[opt].toString());\n      }\n    }\n  }\n\n  var cmd;\n\n  switch(this.opts.mode){\n    case 'photo':\n      cmd = PHOTO_CMD;\n      break;\n    case 'timelapse':\n      cmd = TIMELAPSE_CMD;\n\n      // if no timelapse frequency provided, return false\n      if(typeof this.opts.timelapse === \"undefined\"){\n        this.emit(\"start\", \"Error: must specify timelapse frequency option\", new Date().getTime() );\n        return false;\n      }\n      // if not timeout provided, set to longest possible\n      if(typeof this.opts.timeout === \"undefined\"){\n        this.opts.timeout = INFINITY_MS;\n      }\n      break;\n    case 'video':\n      cmd = VIDEO_CMD;\n      break;\n    default:\n      this.emit(\"start\", \"Error: mode must be photo, timelapse or video\", new Date().getTime() );\n      return false;\n  }\n\n  //start child process\n  console.log('calling....');\n  console.log(cmd + ' ' + args.join(\" \"));\n  this.child_process = spawn(cmd, args);\n  child_process = this.child_process;\n  PROCESS_RUNNING_FLAG = true;\n\n  //set up listeners for stdout, stderr and process exit\n  this.addChildProcessListeners();\n\n  this.emit(\"start\", null, new Date().getTime() );\n   \n\n  return true;\n  \n};\n\n// stop the child process\n// return true if process was running, false if no process to kill\nRaspiCam.prototype.stop = function( ) {\n\n  //close previous directory watcher if any\n  if(this.watcher !== null){\n    this.watcher.close();\n  }\n\n  if(PROCESS_RUNNING_FLAG){\n    this.child_process.kill();\n    child_process = null;\n    PROCESS_RUNNING_FLAG = false;\n\n    this.emit(\"stop\", null, new Date().getTime() );\n    return true;\n  }else{\n    this.emit(\"stop\", \"Error: no process was running\", new Date().getTime());\n    return false;\n  }\n};\n\n\n/**\n*\n* addChildProcessListeners()\n* \n* Adds listeners to the child process spawned to take pictures\n* or record video (raspistill or raspivideo).\n*\n**/\nRaspiCam.prototype.addChildProcessListeners = function(){\n  var self = this;\n  var dout, derr;\n\n  this.child_process.stdout.on('data', function (data) {\n    console.log('stdout: ' + data);\n    dout = data;\n  });\n\n  this.child_process.stderr.on('data', function (data) {\n    console.log('stderr: ' + data);\n    derr = data;\n  });\n\n  this.child_process.on('close', function (code) {    \n    //emit exit signal for process chaining over time\n    self.emit( \"exit\", new Date().getTime() );\n\n    PROCESS_RUNNING_FLAG = false;\n    self.child_process = null;\n    child_process = null;\n    this.watcher = null;\n  });\n\n};\n\n\n/**\n*\n* getter\n*\n**/\nRaspiCam.prototype.get = function(opt){\n  return this.opts[opt];\n};\n\n\n/**\n*\n* setter\n*\n**/\nRaspiCam.prototype.set = function(opt, value){\n  this.opts[opt] = value;\n  if(opt == \"output\"){\n    //regenerate filepath, etc, with new output value\n    this.derivativeOpts();\n  }\n};\n\nmodule.exports = RaspiCam;\n","/home/travis/build/npmtest/node-npmtest-raspicam/node_modules/raspicam/lib/fn.js":"var lodash = require(\"lodash\"),\n    Fn = {\n      assign: lodash.assign,\n      extend: lodash.extend,\n      debounce: lodash.debounce\n    };\n\n// Fn.map( val, fromLow, fromHigh, toLow, toHigh )\n//\n// Re-maps a number from one range to another.\n// Based on arduino map()\nFn.map = function( x, fromLow, fromHigh, toLow, toHigh ) {\n  return ( x - fromLow ) * ( toHigh - toLow ) /\n          ( fromHigh - fromLow ) + toLow;\n};\n\n// Alias\nFn.scale = Fn.map;\n\n// Fn.constrain( val, lower, upper )\n//\n// Constrains a number to be within a range.\n// Based on arduino constrain()\nFn.constrain = function( x, lower, upper ) {\n  return x <= upper && x >= lower ? x :\n          (x > upper ? upper : lower);\n};\n\n// Fn.range( upper )\n// Fn.range( lower, upper )\n// Fn.range( lower, upper, tick )\n//\n// Returns a new array range\n//\nFn.range = function( lower, upper, tick ) {\n\n  if ( arguments.length === 1 ) {\n    upper = lower;\n    lower = 0;\n  }\n\n  lower = lower || 0;\n  upper = upper || 0;\n  tick = tick || 1;\n\n  var len = Math.max( Math.ceil( (upper - lower) / tick ), 0 ),\n      idx = 0,\n      range = [];\n\n  while ( idx <= len ) {\n    range[ idx++ ] = lower;\n    lower += tick;\n  }\n\n  return range;\n};\n\n// Fn.range.prefixed( prefix, upper )\n// Fn.range.prefixed( prefix, lower, upper )\n// Fn.range.prefixed( prefix, lower, upper, tick )\n//\n// Returns a new array range, each value prefixed\n//\nFn.range.prefixed = function( prefix, lower, upper, tick ) {\n  return Fn.range.apply( null, [].slice.call(arguments, 1) ).map(function( val ) {\n    return prefix + val;\n  });\n};\n\n// Fn.uid()\n//\n// Returns a reasonably unique id string\n//\nFn.uid = function() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(chr) {\n    var rnd = Math.random() * 16 | 0;\n    return (chr === \"x\" ? rnd : (rnd & 0x3 | 0x8)).toString(16);\n  }).toUpperCase();\n};\n\n// Fn.square()\n//\n// Returns squared x\n//\nFn.square = function( x ) {\n  return x * x;\n};\n\n// Fn.sleep( ms )\n//  delay for ms\n//\n// Returns undefined\n//\nFn.sleep = function( ms ) {\n  var start = Date.now();\n  while ( Date.now() < start + ms ) {}\n};\n\n\n\n\nmodule.exports = Fn;\n","/home/travis/build/npmtest/node-npmtest-raspicam/node_modules/raspicam/Gruntfile.js":"module.exports = function(grunt) {\n\t// Do grunt-related things in here\n\n\t// Project configuration.\n\tgrunt.initConfig({\n\t\tpkg: grunt.file.readJSON(\"package.json\"),\n\t\tnodeunit: {\n\t\t\ttests: [\n\t\t\t\t\"test/raspicam.js\"\n\t\t\t]\n\t\t},\n\t\tjshint: {\n\t\t\toptions: {\n\t\t\t\tcurly: true,\n\t\t\t\teqeqeq: true,\n\t\t\t\timmed: true,\n\t\t\t\tlatedef: true,\n\t\t\t\tnewcap: true,\n\t\t\t\tnoarg: true,\n\t\t\t\tsub: true,\n\t\t\t\tundef: true,\n\t\t\t\tboss: true,\n\t\t\t\teqnull: true,\n\t\t\t\tnode: true,\n\t\t\t\tstrict: false,\n\t\t\t\tglobals: {\n\t\t\t\t\texports: true,\n\t\t\t\t\tdocument: true,\n\t\t\t\t\t$: true,\n\t\t\t\t\tRadar: true,\n\t\t\t\t\tWeakMap: true,\n\t\t\t\t\twindow: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tfiles: {\n\t\t\t\tsrc: [\"Gruntfile.js\", \"lib/**/*.js\", \"test/**/*.js\"]\n\t\t\t}\n\t\t},\n\t\tjsbeautifier: {\n\t\t\tfiles: [\"lib/**/*.js\"],\n\t\t\toptions: {\n\t\t\t\tjs: {\n\t\t\t\t\tbraceStyle: \"collapse\",\n\t\t\t\t\tbreakChainedMethods: false,\n\t\t\t\t\te4x: false,\n\t\t\t\t\tevalCode: false,\n\t\t\t\t\tindentChar: \" \",\n\t\t\t\t\tindentLevel: 0,\n\t\t\t\t\tindentSize: 2,\n\t\t\t\t\tindentWithTabs: false,\n\t\t\t\t\tjslintHappy: false,\n\t\t\t\t\tkeepArrayIndentation: false,\n\t\t\t\t\tkeepFunctionIndentation: false,\n\t\t\t\t\tmaxPreserveNewlines: 10,\n\t\t\t\t\tpreserveNewlines: true,\n\t\t\t\t\tspaceBeforeConditional: true,\n\t\t\t\t\tspaceInParen: false,\n\t\t\t\t\tunescapeStrings: false,\n\t\t\t\t\twrapLineLength: 0\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});//end initConfig\n\n\t// Default tasks are contrib plugins\n\tgrunt.loadNpmTasks(\"grunt-contrib-nodeunit\");\n\tgrunt.loadNpmTasks(\"grunt-contrib-jshint\");\n\tgrunt.loadNpmTasks(\"grunt-jsbeautifier\");\n\n\t// Default task.\n\tgrunt.registerTask(\"default\", [\"jshint\", \"nodeunit\"]);\n};","/home/travis/build/npmtest/node-npmtest-raspicam/node_modules/raspicam/eg/photo.js":"var RaspiCam = require(\"../lib/raspicam\");\n\n\nvar camera = new RaspiCam({\n\tmode: \"photo\",\n\toutput: \"./photo/image.jpg\",\n\tencoding: \"jpg\",\n\ttimeout: 0 // take the picture immediately\n});\n\ncamera.on(\"started\", function( err, timestamp ){\n\tconsole.log(\"photo started at \" + timestamp );\n});\n\ncamera.on(\"read\", function( err, timestamp, filename ){\n\tconsole.log(\"photo image captured with filename: \" + filename );\n});\n\ncamera.on(\"exit\", function( timestamp ){\n\tconsole.log(\"photo child process has exited at \" + timestamp );\n});\n\ncamera.start();","/home/travis/build/npmtest/node-npmtest-raspicam/node_modules/raspicam/eg/timelapse.js":"var RaspiCam = require(\"../lib/raspicam\");\n\n\nvar camera = new RaspiCam({\n\tmode: \"timelapse\",\n\toutput: \"./timelapse/image_%06d.jpg\", // image_000001.jpg, image_000002.jpg,...\n\tencoding: \"jpg\",\n\ttimelapse: 3000, // take a picture every 3 seconds\n\ttimeout: 12000 // take a total of 4 pictures over 12 seconds\n});\n\ncamera.on(\"start\", function( err, timestamp ){\n\tconsole.log(\"timelapse started at \" + timestamp);\n});\n\ncamera.on(\"read\", function( err, timestamp, filename ){\n\tconsole.log(\"timelapse image captured with filename: \" + filename);\n});\n\ncamera.on(\"exit\", function( timestamp ){\n\tconsole.log(\"timelapse child process has exited\");\n});\n\ncamera.on(\"stop\", function( err, timestamp ){\n\tconsole.log(\"timelapse child process has been stopped at \" + timestamp);\n});\n\ncamera.start();\n\n// test stop() method before the full 12 seconds is up\nsetTimeout(function(){\n\tcamera.stop();\n}, 10000);","/home/travis/build/npmtest/node-npmtest-raspicam/node_modules/raspicam/eg/video.js":"var RaspiCam = require(\"../lib/raspicam\");\n\n\nvar camera = new RaspiCam({\n\tmode: \"video\",\n\toutput: \"./video/video.h264\",\n\tframerate: 15,\n\ttimeout: 5000 // take a 5 second video\n});\n\ncamera.on(\"started\", function( err, timestamp ){\n\tconsole.log(\"video started at \" + timestamp );\n});\n\ncamera.on(\"read\", function( err, timestamp, filename ){\n\tconsole.log(\"video captured with filename: \" + filename + \" at \" + timestamp );\n});\n\ncamera.on(\"exit\", function( timestamp ){\n\tconsole.log(\"video child process has exited at \" + timestamp );\n});\n\ncamera.start();"}